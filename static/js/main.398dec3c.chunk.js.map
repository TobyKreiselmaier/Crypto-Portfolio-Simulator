{"version":3,"sources":["components/Header/logo.png","components/Header/Header.jsx","components/AccountBalance/AccountBalance.jsx","components/Coin/Coin.jsx","components/CoinList/CoinList.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","styled","header","Img","img","H1","h1","ExchangeHeader","src","logo","alt","Section","section","Button","button","Balance","div","formatter","Intl","NumberFormat","style","currency","AccountBalance","props","content","showBalance","format","amount","buttonClass","onClick","handleBalanceDisplay","className","handleAirDrop","Td","td","TdControls","TdName","Coin","name","ticker","price","balance","action","method","event","preventDefault","handleRefresh","tickerId","handleTransaction","Table","table","CoinList","coinData","map","key","Div","App","useState","coinCount","setBalance","setShowBalance","setCoinData","getTopIds","a","axios","get","response","data","slice","coin","id","getNewCoinData","ids","i","length","j","push","symbol","quotes","USD","componentDidMount","topIds","newCoinData","prompt","parseFloat","isNaN","alert","useEffect","newPrice","values","newValues","old","isBuy","valueChangeId","balanceChange","replace","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.398dec3c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.a2636e92.png\";","import React from 'react'\r\nimport logo from './logo.png'\r\nimport styled from 'styled-components';\r\n\r\nconst Header = styled.header`\r\n    background-color: #282c34;\r\n    min-height: 30vh;\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    font-size: 36px;\r\n    color: white;\r\n`;\r\n\r\nconst Img = styled.img`\r\n    height: 6rem;\r\n    pointer-events: none;\r\n`;\r\n\r\nconst H1 = styled.h1`\r\n    font-size: 4rem;\r\n    line-height: 8rem;\r\n    margin: 0 2.5rem 0 2.5rem;\r\n`;\r\n\r\nexport default function ExchangeHeader () {\r\n    return (\r\n        <Header>\r\n            <Img src={logo} alt='Bitcoin Logo'></Img>\r\n            <H1>\r\n                Crypto Portfolio Simulator\r\n            </H1>\r\n        </Header>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport propTypes from 'prop-types';\r\n\r\nconst Section = styled.section`\r\n    font-size: 2rem;\r\n    text-align: center;\r\n    margin-bottom: 2rem;\r\n    line-height: 3rem;\r\n`;\r\n\r\nconst Button = styled.button`\r\n    margin: 0 8px;\r\n    border: 1px solid #fff;\r\n    border-radius: 5px;\r\n`;\r\n\r\nconst Balance = styled.div`\r\n    min-width: 250px;\r\n    margin 0.5rem 0 0 2.5rem;\r\n    font-size: 1.5rem;\r\n    vertical-align: middle;\r\n    text-align: left;\r\n`;\r\n\r\nvar formatter = Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD'\r\n});\r\n\r\nexport default function AccountBalance (props) {\r\n    let content = '\\u00a0';//placeholder so page doesn't jump\r\n    if (props.showBalance) {\r\n        content = <>Account Balance: {formatter.format(props.amount)}</>\r\n    }\r\n    const buttonClass = 'btn ' + (props.showBalance ? 'btn-warning' : 'btn-info')\r\n    return (\r\n        <>\r\n            <Balance>{content}</Balance>\r\n            <Section>\r\n                <Button \r\n                    onClick={props.handleBalanceDisplay} \r\n                    className={buttonClass}>\r\n                    {props.showBalance ? 'Hide Balances' : 'Show Balances'}\r\n                </Button>\r\n                <Button \r\n                    onClick={props.handleAirDrop}\r\n                    className='btn btn-success'>\r\n                    <i className=\"fas fa-helicopter\"></i>\r\n                </Button>\r\n            </Section>\r\n        </>\r\n    );\r\n}\r\n\r\nAccountBalance.propTypes = {\r\n    amount: propTypes.number.isRequired\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport propTypes from 'prop-types';\r\n\r\nconst Td = styled.td`\r\n    border: 1px solid rgb(15, 10, 10);\r\n    width: 12vw;\r\n    height: 5vh;\r\n`;\r\n\r\nconst TdControls = styled(Td)`\r\n    width: 20vw;\r\n`;\r\n\r\nconst TdName = styled(Td)`\r\n    width: 24vw;\r\n`;\r\n\r\nconst Button = styled.button`\r\n    font-size: 1.0rem;\r\n    margin: 0.1rem 0.2rem 0.1rem 0.2rem;\r\n    border: 1px solid #fff;\r\n    border-radius: 5px;\r\n`;\r\n\r\nexport default function Coin (props) {\r\n  const handleRefresh = (event) => {\r\n    event.preventDefault();\r\n    props.handleRefresh(props.tickerId);\r\n  }\r\n\r\n  const handleBuy = (event) => {\r\n    event.preventDefault();\r\n    props.handleTransaction(true, props.tickerId);\r\n  }\r\n\r\n  const handleSell = (event) => {\r\n    event.preventDefault();\r\n    props.handleTransaction(false, props.tickerId);\r\n  }\r\n  \r\n  return (\r\n    <tr>\r\n      <TdName>{props.name}</TdName>\r\n      <Td>{props.ticker}</Td>\r\n      <Td>{props.price}</Td>\r\n      <Td>{props.showBalance ? props.balance:'-'}</Td>\r\n      <TdControls>\r\n        <form action='#' method='POST'>\r\n        <Button className='btn btn-warning' onClick={handleRefresh}>\r\n            Refresh Price\r\n        </Button>\r\n        <Button className='btn btn-success' onClick={handleBuy}>\r\n            Buy\r\n        </Button>\r\n        <Button className='btn btn-danger' onClick={handleSell}>\r\n            Sell\r\n        </Button>\r\n        </form>\r\n      </TdControls>\r\n    </tr>\r\n  );\r\n}\r\n\r\nCoin.propTypes = {\r\n  name: propTypes.string.isRequired,\r\n  ticker: propTypes.string.isRequired,\r\n}","import React from 'react';\r\nimport Coin from '../Coin/Coin';\r\nimport styled from 'styled-components';\r\n\r\nconst Table = styled.table`\r\n    width: 80%;\r\n    margin: auto;\r\n    line-height: 2rem;\r\n`;\r\n\r\nexport default function CoinList (props) {\r\n    return (\r\n        <Table className='table table-primary table-bordered'>\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Ticker</th>\r\n            <th>Price</th>\r\n            <th>Balance</th>\r\n            <th>Actions</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {\r\n            props.coinData.map(({key, name, ticker, price, balance}) =>\r\n              <Coin key={key} \r\n                    handleRefresh={props.handleRefresh} \r\n                    handleTransaction={props.handleTransaction} \r\n                    name={name} \r\n                    ticker={ticker} \r\n                    showBalance={props.showBalance}\r\n                    balance={balance}\r\n                    price={price}\r\n                    tickerId={key}/>\r\n            )\r\n          }\r\n        </tbody>\r\n      </Table>\r\n    )\r\n}","import React, {useState, useEffect} from 'react'\r\nimport Header from './components/Header/Header';\r\nimport AccountBalance from './components/AccountBalance/AccountBalance';\r\nimport CoinList from './components/CoinList/CoinList';\r\nimport styled from 'styled-components';\r\nimport axios from 'axios';\r\nimport 'bootswatch/dist/darkly/bootstrap.min.css';\r\nimport '@fortawesome/fontawesome-free/js/all';\r\n\r\nconst Div = styled.div`\r\n    text-align: center;\r\n    background-color:#61DBFB;\r\n    color: rgb(15, 10, 10);\r\n`;\r\n\r\nvar formatter = Intl.NumberFormat('en-US', {\r\n  style: 'currency',\r\n  currency: 'USD'\r\n});\r\n\r\nfunction App () {\r\n  const [coinCount] = useState(20);\r\n  const [balance, setBalance] = useState(0);//use State Hook\r\n  const [showBalance, setShowBalance] = useState(true);\r\n  const [coinData, setCoinData] = useState([]);\r\n\r\n  const getTopIds = async () => {\r\n    const response = await axios.get('https://api.coinpaprika.com/v1/coins');\r\n    return response.data.slice(0, coinCount).map(coin => coin.id);\r\n  }\r\n\r\n  const getNewCoinData = async (ids) => {\r\n    let data = [];\r\n    const response = await axios.get('https://api.coinpaprika.com/v1/tickers');\r\n    for (let i = 0; i < response.data.length; i++) {\r\n      for (let j = 0; j < ids.length; j++) {\r\n        if (ids[j] === response.data[i].id) {\r\n          data.push({ \r\n            key: response.data[i].id,\r\n            name: response.data[i].name,\r\n            ticker: response.data[i].symbol,\r\n            balance: 0,\r\n            price: formatter.format(response.data[i].quotes.USD.price)\r\n          });\r\n        }\r\n      }\r\n    }\r\n    return data;\r\n  }\r\n\r\n  const componentDidMount = async () => {\r\n    const topIds = await getTopIds();\r\n    const newCoinData = await getNewCoinData(topIds);\r\n    setCoinData(newCoinData);\r\n    var amount = (prompt(\"Please enter the size of your testportfolio in USD:\", 1000000));\r\n    if (amount === null) {\r\n      //check for 'cancel' button\r\n      return;\r\n    } else {\r\n      amount = parseFloat(amount);\r\n    };\r\n    if (isNaN(amount)) {\r\n      //check if number was entered\r\n      alert(\"Please enter a number!\");\r\n      componentDidMount();\r\n    } else if (amount <= 0) {\r\n      //check if negative number was entered\r\n      alert(\"Please enter a positive number!\");\r\n      componentDidMount();\r\n    } else{\r\n      setBalance(amount);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {//Effect Hook - can not be async!\r\n    if (coinData.length === 0) {//componentDidMount sitation\r\n      componentDidMount();\r\n    }\r\n  });\r\n\r\n  const handleAirDrop = () => {//doesn't fire\r\n    setBalance(old => old + 1200);\r\n  }\r\n\r\n  const handleTransaction = (isBuy, valueChangeId) => {\r\n    var balanceChange;\r\n    var newCoinData = [];\r\n    if(showBalance){//only allow operation when balances are shown.\r\n      if(isBuy) {//buy operation\r\n        balanceChange = prompt(`How many ` + valueChangeId + ` would you like to buy?`, 1);\r\n        if (balanceChange === null) {\r\n          return;\r\n        } else if (balanceChange <= 0) {\r\n          //throw if negative number\r\n          alert(\"Please enter a positive number!\");\r\n          handleTransaction(true, valueChangeId);\r\n        } else if (isNaN(balanceChange)) {\r\n          //throw if no number\r\n          alert(\"Please enter a number!\");\r\n          handleTransaction(true, valueChangeId);\r\n        } else{\r\n          //handle buy input\r\n          balanceChange = parseFloat(balanceChange);\r\n          newCoinData = coinData.map( function(values) {\r\n            let newValues = {...values};\r\n            if (valueChangeId === values.key) {\r\n              //make sure it's the right coin\r\n              if(newValues.balance + balanceChange >= 0) {\r\n                //make sure no negative balance possible on coin\r\n                if(balance - balanceChange * parseFloat((newValues.price).replace(/[$,]/g,'')) >= 0) {\r\n                  //make sure no negative account balance possible\r\n                  newValues.balance += balanceChange;\r\n                  setBalance(old => old - balanceChange * parseFloat((newValues.price).replace(/[$,]/g,'')))\r\n                }\r\n              }\r\n            }\r\n            return newValues;\r\n          });\r\n        }\r\n      } else if (!isBuy) {//sell operation\r\n        balanceChange = prompt(`How many ` + valueChangeId + ` would you like to sell?`, 1);\r\n        if (balanceChange === null) {\r\n          //throw if 'cancel' button\r\n          return;\r\n        } else if (balanceChange <= 0) {\r\n          //throw if negative number\r\n          alert(\"Please enter a positive number!\");\r\n          handleTransaction(false, valueChangeId);\r\n        } else if (isNaN(balanceChange)) {\r\n          //throw if no number\r\n          alert(\"Please enter a number!\");\r\n          handleTransaction(false, valueChangeId);\r\n        } else {\r\n          //handle sell input\r\n          balanceChange = parseFloat(balanceChange);\r\n          newCoinData = coinData.map( function(values) {\r\n            let newValues = {...values};\r\n            if (valueChangeId === values.key) {\r\n              //make sure it's the right coin\r\n              if(newValues.balance - balanceChange >= 0) {\r\n                //make sure no negative balance possible on coin\r\n                newValues.balance -= balanceChange;\r\n                setBalance(old => old + balanceChange * parseFloat((newValues.price).replace(/[$,]/g,'')))\r\n              } else {\r\n                alert ('You can not sell what you do not own!');\r\n              }\r\n            }\r\n            return newValues;\r\n          });\r\n        }\r\n      }\r\n      setCoinData(newCoinData);\r\n    };\r\n  }\r\n\r\n  const handleBalanceDisplay = () => {\r\n    setShowBalance(old => !old);\r\n  }\r\n\r\n  const handleRefresh = async (tickerId) => {\r\n    const response = await axios.get(`https://api.coinpaprika.com/v1/tickers/${tickerId}`);\r\n    const newPrice = formatter.format(response.data.quotes.USD.price);\r\n    const newCoinData = coinData.map((values) => {\r\n      let newValues = { ...values };\r\n      if (tickerId === values.key) {\r\n        newValues.price = newPrice;\r\n      }\r\n      return newValues;\r\n    });\r\n    setCoinData(newCoinData);\r\n  }\r\n\r\n  return (\r\n    <Div className=\"App\">\r\n      <Header/>\r\n      <AccountBalance \r\n        amount={balance} \r\n        showBalance={showBalance} \r\n        handleAirDrop={handleAirDrop} \r\n        handleBalanceDisplay={handleBalanceDisplay}/>\r\n      <CoinList \r\n        coinData={coinData} \r\n        showBalance={showBalance} \r\n        handleTransaction={handleTransaction} \r\n        handleRefresh={handleRefresh}/>\r\n    </Div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}